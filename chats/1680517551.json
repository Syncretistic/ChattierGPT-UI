{"created": 1680517551, "frequency_penalty": 0.0, "max_context_tokens": 4000, "max_tokens": 4000, "messages": {"content": "You are ChatGPT, a large language model trained by OpenAI. Answer as concisely as possible.", "context_tokens": 0, "next": [{"content": "import openai\n\ndef chat_gpt(agent, messages):\n\n    response = openai.ChatCompletion.create(\n\n        model=agent,\n\n        messages=messages\n\n    )\n\n    return response['choices'][0]['message']['content']\n\ndef iterative_improvement(writer_agent, reviewer_agent, context, objectives, task, review_task, iterations):\n\n    system_message = f\"You are a helpful assistant. {context} {objectives}\"\n\n    for i in range(iterations):\n\n        print(\"=== TRY n. \"+ str(i) + \" ===\")\n\n        # Query Writer agent\n\n        writer_response = chat_gpt(writer_agent, [\n\n            {\"role\": \"system\", \"content\": system_message},\n\n            {\"role\": \"user\", \"content\": task}\n\n        ])\n\n        # Query Reviewer agent\n\n        critique = chat_gpt(reviewer_agent, [\n\n            {\"role\": \"system\", \"content\": f\"{system_message} {review_task}\"},\n\n            {\"role\": \"user\", \"content\": writer_response}\n\n        ])\n\n        # Update task with critique\n\n        task = f\"{writer_response} {critique}\"\n        print(\"\\n========================== WRITER RESPONSE ==========================\\n\")\n        print(writer_response)\n        print(\"\\n========================== CRITIQUE ==========================\\n\")\n        print(critique)\n\n    return writer_response\n\n# Set variables\ndef main():\n\n    openai.api_key = \"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\"\n\n    writer_agent = \"gpt-4\"\n\n    reviewer_agent = \"gpt-4\"\n\n    context = \"You are the QualityChain social media manager. Your objective is to create engaging, surprising content \" \\\n              \"for the QualityChain linkedin page. QualityChain is a software to create QR Codes that tell the story of \" \\\n              \"agrifood products. We create QR Codes in various shapes and we use blockchain to make the data indelible. \" \\\n              \"We also translate the pages in 36 languages. We also allow the producers to include their certifications \" \\\n              \"and prizes in the QR Code, as well as instructions for recycling the product packaging. \"\n\n    objectives = \"You need content that fullfills each of the following objectives:\" \\\n                 \"a) It needs to be novel and original.\" \\\n                 \"b) It needs to be interesting for food producers\" \\\n                 \"c) It must not be about QualityChain. It must be about another topic, completely separate, \" \\\n                 \"interesting for people who might buy qualitychain (agri-food producers, owners or marketing \" \\\n                 \"managers) \" \\\n                 \"d) It needs to be factually correct.\"\n\n    task = \"Task: Write a linkedin post in italian titled \ud83c\udf7d\ufe0f Food Marketing Tips #4: Usa prodotti omaggio.\"\n\n    review_task = \"Your objective is to review the posts that you receive from your colleague, analyze if it fits \" \\\n                  \"each of the objectives and provide feedback to make it better. You need to be very strict, \" \\\n                  \"but fair. Do not provide your version of the post, just give the recommendations.\"\n\n    iterations = 3\n\n    # Call iterative_improvement function\n\n    final_response = iterative_improvement(writer_agent, reviewer_agent, context, objectives, task, review_task, iterations)\n\n    print(final_response)\n\nif __name__ == \"__main__\":\n\n    main()\n\nEdit the previous code to include try statements like the following\n\ndef query_completions(prompt_text, model, temperature=0, max_tokens=4096, retries=3):\n    for i in range(retries):\n        try:\n            print(\"Started querying GPT-3\")\n            print(prompt_text)\n            response = openai.Completion.create(\n                prompt=prompt_text,\n                temperature=temperature,\n                max_tokens=max_tokens,\n                model=model\n            )[\"choices\"][0][\"text\"].strip(\" \\n\")\n            return response\n        except openai.error.ServiceUnavailableError as e:\n            print(f\"OpenAI API server error: {e}\")\n        except openai.error.Timeout as e:\n            print(f\"OpenAI API request timed out: {e}\")\n        except openai.error.APIError as e:\n            print(f\"OpenAI API returned an API Error: {e}\")\n        except openai.error.APIConnectionError as e:\n            print(f\"OpenAI API request failed to connect: {e}\")\n        except openai.error.InvalidRequestError as e:\n            print(f\"OpenAI API request was invalid: {e}\")\n        except openai.error.AuthenticationError as e:\n            print(f\"OpenAI API request was not authorized: {e}\")\n        except openai.error.PermissionError as e:\n            print(f\"OpenAI API request was not permitted: {e}\")\n        except openai.error.RateLimitError as e:\n            print(f\"OpenAI API request exceeded rate limit: {e}\")\n\n    print(\"Failed to get response from GPT-3 after multiple retries\")\n    return \"\"", "context_tokens": 28, "next": [{"content": "Here's the edited version of your code with try statements added to `chat_gpt` function:\n\n```python\nimport openai\n\ndef chat_gpt(agent, messages, retries=3):\n    for i in range(retries):\n        try:\n            response = openai.ChatCompletion.create(\n                model=agent,\n                messages=messages\n            )\n            return response['choices'][0]['message']['content']\n        except openai.error.ServiceUnavailableError as e:\n            print(f\"OpenAI API server error: {e}\")\n        except openai.error.Timeout as e:\n            print(f\"OpenAI API request timed out: {e}\")\n        except openai.error.APIError as e:\n            print(f\"OpenAI API returned an API Error: {e}\")\n        except openai.error.APIConnectionError as e:\n            print(f\"OpenAI API request failed to connect: {e}\")\n        except openai.error.InvalidRequestError as e:\n            print(f\"OpenAI API request was invalid: {e}\")\n        except openai.error.AuthenticationError as e:\n            print(f\"OpenAI API request was not authorized: {e}\")\n        except openai.error.PermissionError as e:\n            print(f\"OpenAI API request was not permitted: {e}\")\n        except openai.error.RateLimitError as e:\n            print(f\"OpenAI API request exceeded rate limit: {e}\")\n\n    print(\"Failed to get response from GPT-3 after multiple retries\")\n    return \"\"\n\n# The rest of your code remains the same.\n```\n\nThe `chat_gpt` function now includes try statements to handle various exceptions that may occur when querying the OpenAI API. The function will retry the request up to the specified number of retries (default is 3) before giving up and returning an empty string.", "context_tokens": 1082, "next": [], "role": "assistant", "selected": null, "tokens": 372}], "role": "user", "selected": 0, "tokens": 1054}], "role": "system", "selected": 0, "tokens": 28}, "model": "gpt-4", "presence_penalty": 0.0, "temperature": 0.7, "top_p": 1.0}