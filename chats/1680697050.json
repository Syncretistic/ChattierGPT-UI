{"created": 1680697050, "frequency_penalty": 0.0, "max_context_tokens": 4000, "max_tokens": 4000, "messages": {"content": "You are ChatGPT, a large language model trained by OpenAI. Answer as concisely as possible.", "context_tokens": 0, "next": [{"content": "Edit the following code so that the result and review history is included in every request\n\nimport openai\n\ndef chat_gpt(agent, messages, retries=3):\n\n    for i in range(retries):\n\n        try:\n\n            response = openai.ChatCompletion.create(\n\n                model=agent,\n\n                messages=messages\n\n            )\n\n            return response['choices'][0]['message']['content']\n\n        except openai.error.ServiceUnavailableError as e:\n\n            print(f\"OpenAI API server error: {e}\")\n\n        except openai.error.Timeout as e:\n\n            print(f\"OpenAI API request timed out: {e}\")\n\n        except openai.error.APIError as e:\n\n            print(f\"OpenAI API returned an API Error: {e}\")\n\n        except openai.error.APIConnectionError as e:\n\n            print(f\"OpenAI API request failed to connect: {e}\")\n\n        except openai.error.InvalidRequestError as e:\n\n            print(f\"OpenAI API request was invalid: {e}\")\n\n        except openai.error.AuthenticationError as e:\n\n            print(f\"OpenAI API request was not authorized: {e}\")\n\n        except openai.error.PermissionError as e:\n\n            print(f\"OpenAI API request was not permitted: {e}\")\n\n        except openai.error.RateLimitError as e:\n\n            print(f\"OpenAI API request exceeded rate limit: {e}\")\n\n    print(\"Failed to get response from GPT-3 after multiple retries\")\n\n    return \"\"\n\n\ndef iterative_improvement(writer_agent, reviewer_agent, context, objectives, task, review_task, iterations):\n\n    system_message = f\"You are a helpful assistant. {context} {objectives}\"\n\n    for i in range(iterations):\n\n        print(\"=== TRY n. \"+ str(i) + \" ===\")\n\n        # Query Writer agent\n\n        writer_response = chat_gpt(writer_agent, [\n\n            {\"role\": \"system\", \"content\": system_message},\n\n            {\"role\": \"user\", \"content\": task}\n\n        ])\n\n        # Query Reviewer agent\n\n        critique = chat_gpt(reviewer_agent, [\n\n            {\"role\": \"system\", \"content\": f\"{system_message} {review_task}\"},\n\n            {\"role\": \"user\", \"content\": writer_response}\n\n        ])\n\n        # Update task with critique\n\n        task = f\"{writer_response} {critique}\"\n        print(\"\\n========================== WRITER RESPONSE ==========================\\n\")\n        print(writer_response)\n        print(\"\\n========================== CRITIQUE ==========================\\n\")\n        print(critique)\n\n    return writer_response\n\n# Set variables\ndef main():\n\n    openai.api_key = \"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\"\n\n    writer_agent = \"gpt-4\"\n\n    reviewer_agent = \"gpt-4\"\n\n    context = \"QualityChain is a digital storytelling platform for food and drink producers, enabling you to share \" \\\n              \"your unique story with consumers while promoting transparency and trust. We believe that there is a \" \\\n              \"vast, untold world behind every label that cannot be captured on packaging alone. With QualityChain, \" \\\n              \"we bridge the gap between producers and consumers through QR codes that provide access to the in-depth \" \\\n              \"stories of your products, company, and values. Our solution leverages blockchain technology to \" \\\n              \"register information, making it indelible and increasing supply chain transparency. We've developed \" \\\n              \"various original designs for our QR codes, tailored to different products, creating a visually \" \\\n              \"appealing and informative experience for consumers. By partnering with QualityChain, you will not only \" \\\n              \"provide a direct link between your brand and your customers, but also help them make informed choices \" \\\n              \"about the food and beverages they consume. In addition, you'll gain valuable insights into the \" \\\n              \"demographics and interests of those engaging with your products, which can be utilized for targeted \" \\\n              \"marketing strategies. We're actively seeking partners in the food and drink industry who are \" \\\n              \"passionate about sharing their stories and increasing transparency with their customers. QualityChain \" \\\n              \"has already established collaborations with Consortia and Tourist Boards, promoting local tourism \" \\\n              \"through the region's distinctive products. By using our platform, your products can become true \" \\\n              \"ambassadors of their origins. \"\n\n    objectives = \"Lorenzo Rinaldi, marketing manager di un'importante azienda food \" \\\n                 \"italiana (inventa il nome e il settore specifico) vuole ringraziare Valentina, collega di un'altra azienda, \" \\\n                 \"per il consiglio che gli ha dato l'anno scorso al Cibus di iniziare a usare\" \\\n                 \"QualityChain. Nella lettera illustra tutti i \" \\\n                 \"benefici che la cosa ha portato alla sua azienda.\" \\\n                 \"You need content that fullfills each of the following objectives:\" \\\n                 \"a) Il contenuto deve risultare naturale e spontaneo.\" \\\n                 \"b) Il tono deve essere rispettoso e si deve dare del Lei\"  \\\n                 \"c) Non deve mai essere menzionato QualityChain in maniera diretta \" \\\n                 \"d) Non deve sembrare uno spot pubblicitario.\"\n\n    task = \"Task: Scrivi una lettera da Lorenzo a Valentina\"\n\n    review_task = \"Your objective is to review the letter that you receive from your colleague, analyze if it fits \" \\\n                  \"each of the objectives and provide feedback to make it better. You need to be very strict, \" \\\n                  \"but fair. Do not provide your version of the post, just give the recommendations.\"\n\n    iterations = 5\n\n    # Call iterative_improvement function\n\n    final_response = iterative_improvement(writer_agent, reviewer_agent, context, objectives, task, review_task, iterations)\n\n    print(final_response)\n\nif __name__ == \"__main__\":\n\n    main()", "context_tokens": 28, "next": [{"content": "import openai\n\ndef chat_gpt(agent, messages, retries=3):\n    for i in range(retries):\n        try:\n            response = openai.ChatCompletion.create(\n                model=agent,\n                messages=messages\n            )\n            return response['choices'][0]['message']['content']\n        except openai.error.ServiceUnavailableError as e:\n            print(f\"OpenAI API server error: {e}\")\n        except openai.error.Timeout as e:\n            print(f\"OpenAI API request timed out: {e}\")\n        except openai.error.APIError as e:\n            print(f\"OpenAI API returned an API Error: {e}\")\n        except openai.error.APIConnectionError as e:\n            print(f\"OpenAI API request failed to connect: {e}\")\n        except openai.error.InvalidRequestError as e:\n            print(f\"OpenAI API request was invalid: {e}\")\n        except openai.error.AuthenticationError as e:\n            print(f\"OpenAI API request was not authorized: {e}\")\n        except openai.error.PermissionError as e:\n            print(f\"OpenAI API request was not permitted: {e}\")\n        except openai.error.RateLimitError as e:\n            print(f\"OpenAI API request exceeded rate limit: {e}\")\n    print(\"Failed to get response from GPT-3 after multiple retries\")\n    return \"\"\n\ndef iterative_improvement(writer_agent, reviewer_agent, context, objectives, task, review_task, iterations):\n    system_message = f\"You are a helpful assistant. {context} {objectives}\"\n\n    for i in range(iterations):\n        print(\"=== TRY n. \"+ str(i) + \" ===\")\n\n        # Query Writer agent\n        writer_response = chat_gpt(writer_agent, [\n            {\"role\": \"system\", \"content\": system_message},\n            {\"role\": \"user\", \"content\": task},\n            {\"role\": \"assistant\", \"content\": f\"Result history: {writer_response}\"}\n        ])\n\n        # Query Reviewer agent\n        critique = chat_gpt(reviewer_agent, [\n            {\"role\": \"system\", \"content\": f\"{system_message} {review_task}\"},\n            {\"role\": \"user\", \"content\": writer_response},\n            {\"role\": \"assistant\", \"content\": f\"Review history: {critique}\"}\n        ])\n\n        # Update task with critique\n        task = f\"{writer_response} {critique}\"\n        print(\"\\n========================== WRITER RESPONSE ==========================\\n\")\n        print(writer_response)\n        print(\"\\n========================== CRITIQUE ==========================\\n\")\n        print(critique)\n\n    return writer_response\n\n# Set variables\ndef main():\n    openai.api_key = \"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\"\n    writer_agent = \"gpt-4\"\n    reviewer_agent = \"gpt-4\"\n    context = \"QualityChain is a digital storytelling platform for food and drink producers, enabling you to share \" \\\n              \"your unique story with consumers while promoting transparency and trust. We believe that there is a \" \\\n              \"vast, untold world behind every label that cannot be captured on packaging alone. With QualityChain, \" \\\n              \"we bridge the gap between producers and consumers through QR codes that provide access to the in-depth \" \\\n              \"stories of your products, company, and values. Our solution leverages blockchain technology to \" \\\n              \"register information, making it indelible and increasing supply chain transparency. We've developed \" \\\n              \"various original designs for our QR codes, tailored to different products, creating a visually \" \\\n              \"appealing and informative experience for consumers. By partnering with QualityChain, you will not only \" \\\n              \"provide a direct link between your brand and your customers, but also help them make informed choices \" \\\n              \"about the food and beverages they consume. In addition, you'll gain valuable insights into the \" \\\n              \"demographics and interests of those engaging with your products, which can be utilized for targeted \" \\\n              \"marketing strategies. We're actively seeking partners in the food and drink industry who are \" \\\n              \"passionate about sharing their stories and increasing transparency with their customers. QualityChain \" \\\n              \"has already established collaborations with Consortia and Tourist Boards, promoting local tourism \" \\\n              \"through the region's distinctive products. By using our platform, your products can become true \" \\\n              \"ambassadors of their origins. \"\n    objectives = \"Lorenzo Rinaldi, marketing manager di un'importante azienda food \" \\\n                 \"italiana (inventa il nome e il settore specifico) vuole ringraziare Valentina, collega di un'altra azienda, \" \\\n                 \"per il consiglio che gli ha dato l'anno scorso al Cibus di iniziare a usare\" \\\n                 \"QualityChain. Nella lettera illustra tutti i \" \\\n                 \"benefici che la cosa ha portato alla sua azienda.\" \\\n                 \"You need content that fullfills each of the following objectives:\" \\\n                 \"a) Il contenuto deve risultare naturale e spontaneo.\" \\\n                 \"b) Il tono deve essere rispettoso e si deve dare del Lei\"  \\\n                 \"c) Non deve mai essere menzionato QualityChain in maniera diretta \" \\\n                 \"d) Non deve sembrare uno spot pubblicitario.\"\n    task = \"Task: Scrivi una lettera da Lorenzo a Valentina\"\n    review_task = \"Your objective is to review the letter that you receive from your colleague, analyze if it fits \" \\\n                  \"each of the objectives and provide feedback to make it better. You need to be very strict, \" \\\n                  \"but fair. Do not provide your version of the post, just give the recommendations.\"\n    iterations = 5\n\n    # Call iterative_improvement function\n    final_response = iterative_improvement(writer_agent, reviewer_agent, context, objectives, task, review_task, iterations)\n    print(final_response)\n\nif __name__ == \"__main__\":\n    main()", "context_tokens": 1300, "next": [], "role": "assistant", "selected": null, "tokens": 1293}], "role": "user", "selected": 0, "tokens": 1272}], "role": "system", "selected": 0, "tokens": 28}, "model": "gpt-4", "presence_penalty": 0.0, "temperature": 0.7, "top_p": 1.0}